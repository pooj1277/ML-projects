# -*- coding: utf-8 -*-
"""LR_Stock.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ICScYF1QOlVEufPBphSHbxrt_wbaTXZo
"""

from sklearn.model_selection import train_test_split
#train_test_split is used to split the data into training and testing data
from sklearn.linear_model import LinearRegression
from sklearn import metrics

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline

from google.colab import files
uploaded=files.upload()

import io
#df = pd.read_csv(io.StringIO(uploaded['dataset.csv'].decode('utf-8')))
#dataset = pd.read_csv['TCS.csv']
dataset = pd.read_csv(io.StringIO(uploaded['TCS.csv'].decode('utf-8')))

dataset.describe()

x = dataset[['High','Low','Open','Volume']].values
y = dataset[['Prev Close','Close']].values

#splitting training and testing data. 20% data will be testing data and 80% will be training data
x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2,random_state=0)

regressor = LinearRegression()

#training model
regressor.fit(x_train, y_train)

print(regressor.coef_)

print(regressor.intercept_)

predicted = regressor.predict(x_test)
print(predicted)

dframe = pd.DataFrame({'Actual':y_test.flatten(),'Predicted':predicted.flatten()})

dframe.head(25)

import math
print('Mean Absolute Error',metrics.mean_absolute_error(y_test,predicted))
print('Mean Squared Error',metrics.mean_squared_error(y_test,predicted))
print('Root Mean Squared Error',math.sqrt(metrics.mean_squared_error(y_test,predicted)))

graph = dframe.head(25)

graph.plot(kind='bar')

